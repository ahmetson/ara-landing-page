import{j as e}from"./jsx-runtime.D_zvdyIk.js";import{r as y}from"./index.BVOCwoKb.js";import{m as b}from"./marked.esm.CZd74qPG.js";const C=JSON.parse('[{"group":"blog","slug":"blog/turning-code-piece-into-restful-api-with-sds-package","frontmatter":{"title":"How did I create a REST api for any JSON object","meta_title":"","description":"A blog describes our refactoring when we turned our AST tree to be REST operational","date":"2025-05-17T00:00:00.000Z","categories":["rest","sds","reflect","refactoring"],"author":"Medet Ahmetson","tags":["refactoring","reflect","exciting"],"draft":false},"content":"\\n## Intro\\nHey, there! I am refactoring my typescript library. I wanted to describe my journey on how I used `Rest` library to write elegant solution. I\'m so excited that I wanted to share with others my solution, hoping it would help you as well. \\n`Rest` library that I want integrate allows to create RESTFul api for any JSON by the CSS Selectors as a querying language.\\n\\nIf you have a large object or deeply nested JSON. CSS Selectors allows a powerful filtering operation to find right element at right nesting. But it\'s not about the library, but how it became elegant and saved me headaches in a long run.\\n\\nFirstly, to give a context, let me describe a library that I am refactoring. A little bit about how the library works internally. I will explain the part used in this refactoring journey. Stay with me till the end, and I hope you will also appreciate by my choice of Rest as the elegant solution. And if you will be in the same situation as I am, hopefully Rest could help you as well. :)\\n\\n> Rest module is open source and released already. It\'s available in the `@ara-web/sds` package in [npmjs](npmjs.com).\\n\\n## Refactoring\\nThe library that I am refactoring is called Reflect package. *Not released yet*. If you are a frontend developer, then with Reflect, you could change data or UI right in your browser console instead opening up the the code editor. \\n\\n> I created it, after getting tired by adjusting CSS. Also, if I had to change the text on the page, I had to go to my code editor, type `\\"Lorum ipsum.Nospace after dot\\"` to find the file. And all of it just to fix the typo. Reflect is the CMS, and Admin panel without being CMS and Admin panel, but only is a Nodejs package that works with any framework.\\n\\nHow it is working internally? Reflect creates Ontological data of the files. Ontological data is stored in the JSON format. Ontology simply means the files will be linked internally.\\n\\nReflect also supports the dynamic data. For example, if a web component parameter depends on a data fetched from the database. Reflect will fetch content from the database. Then, add the result into the JSON representation of the web component.\\n\\nThe dynamic data of the website are called `CodePiece`.\\nCode pieces are component scripts. For example, if a web component depends on variable `var userName = db.getUserId(session)`, then Code Piece will be the result of database request assigned to the user name.\\n\\nCode pieces are used internally, and results are in the `Reflect` memory: [CodePieceMemory](https://github.com/ara-foundation/web/blob/aab7c4c744ed6748e3ca5942820cdf259d81d090/packages/reflect/src/code-piece-memory.ts#L10) memory.\\n\\nReflect Memory keeps key-value pair of the code pieces and their identifiers. Key-Value pairs are defined in [CodePieceRecord](https://github.com/ara-foundation/web/blob/aab7c4c744ed6748e3ca5942820cdf259d81d090/packages/reflect/src/code-level/code-piece.ts#L22) type.\\n\\nAs code pieces also have the types. Type might be a variable\\ndeclaration, a function call, a class or a type definition etc. The potential types of code pieces is defined in [CodePieceType](https://github.com/ara-foundation/web/blob/aab7c4c744ed6748e3ca5942820cdf259d81d090/packages/reflect/src/code-level/code-piece.ts#L6) enum.\\n\\nBut interaction with this key-value memory isn\'t flexible.\\nIf we want to receive a code by the code piece type, or do \\nthey have certain attribute, then generating additional\\ninterface adds more code lines.\\n\\nLuckily, creating `Rest` module for collaboration website, I found that using it for memory is also useful.\\nIf I will need a result from memory, I could use `CodePieceMemory.get`, `CodePieceMemory.post` and other rest operations. And filtering is done by the Rest.\\n\\n## What do I need to do to use Rest in my code?\\n\\nRest doesn\'t work with JSON straight away. Rest works with the ontological object tree. So, we need to define ontological object node, and tree builder that can convert our JSON into ontological nodes.\\n\\nOntological means, instead IDs, we use links. \\nIf I say, this is ontological array, then array may be, elements of array, or size of array may be linked to another data within the project. That to understand the array, you need to find elements by the link. Basically, ontological array defines what it presents. Your source codes don\'t need it, as they have module importing rules provided by the package managers.\\nDatabases also don\'t need it, since they have `foreign-keys`.\\nBut if we want to have inter-related JSON that is agnostic of database, or file system which means we can share it, we can use it in anywhere. Then, we need it.\\n\\nSo, we the first step is to design the ontology of our code piece. Which means the links. To make it work with CSS Selectors, our links should be extending Object Links. \\n\\n> 1 First step in using Rest API for any JSON:\\n> **Design Linking rules for objects compatible with ObjectLink**\\n\\n## 1. Ontology, code piece links as object links\\n\\nObject Links are based on CSS Selectors. It\'s compatible with the CSS, so, any CSS Parser would understand object links as well.\\n\\n**Valid Object Links**\\n```css\\ndiv#main-content        /* main-content element in the page */\\na[href=\\"google.com\\"]    /* all links to google.com          */\\n.btn-primary            /* all primary buttons              */\\n```\\n\\nObject Links provide four ways to build selectors:\\n- ID\\n- Tag\\n- Class\\n- Attribute\\n\\nWe need to think, how do we design our JSON links, to match our data to object link\'s four selectors.\\n\\n### 1.1 Defining link selectors to our JSON object.\\nIn Reflect, Code pieces are already stored using identifiers. So, we will match it with id selector. \\nIf we have a variable `let userName`; Then we could\\nfetch it using `#userName` link.\\n\\nCode Pieces have its own attributes such as `public`, `data`,\\n`dataType` etc. If we want to fetch all `const varName` variables, then we could fetch using `[constant]`,\\nif we want to fetch all `let varName`, then we could write `[constant!=true]`.\\n\\nOur code pieces have a type. Let them be the tag of code piece. To return all variable declarations we could write `var`, to return all type declarations we could write `type`.\\n\\nWhen it comes to classes, we don\'t need them.\\n\\n### 1.2 Writing the code for Object Link creation\\nSo let\'s create Object Node builder four our code pieces. What will be the Rest operations work with? With the code pieces in a single memory. So, each module have it\'s own object tree from code pieces.\\n\\n```typescript\\nimport { OkResult } from \\"@ara-web/p-hintjens\\";\\nimport { type ObjectToNodeTree, type ElementOp, ObjectNode, DOCUMENT_SELECTOR } from \\"@ara-web/sds\\";\\n\\nexport const moduleToObjectTree: ObjectToNodeTree<CodePiece> = (): ObjectNode<CodePiece> => {\\n    // Creating the root for entire source code that has one or many code pieces.\\n    const doc = new ObjectNode<CodePiece>(codePieceOps);\\n    return doc;\\n}\\n```\\n\\nThe `codePieceOps` is the helpful translators, that in request by Object Node, will return respectful CSS Selector.\\n\\nHere is the declaration:\\n\\n```typescript\\nexport const codePieceOps: ElementOp<CodePiece> = {\\n\\tgetName: getCodePieceName,\\n\\tgetChildren: getCodePieceChildren,\\n\\tgetAttribute: getCodePieceAttribute,\\n\\tsetAttribute: setCodePieceAttribute,\\n}\\n```\\n\\nCode Piece Operations define four functions that CSS Selectors use for every object node.\\nBefore starting to write code pieces, we already designed how we will define the css selectors.\\n\\nWe could solve if one condition.\\n\\nThe element operator that returns ID selector of the `CodePiece`:\\n\\n```typescript\\nconst getCodePieceName = (_element?: CodePiece): string => {\\n\\tif (_element === undefined) {\\n\\t\\treturn DOCUMENT_SELECTOR;\\n\\t}\\n    return _element.identifier!;\\n}\\n```\\n\\nAnd other code piece operations:\\n```typescript\\nconst getCodePieceChildren = (el: CodePiece): CodePiece[] => {\\n\\treturn el.getAllMemoryData();\\n}\\n\\nconst getCodePieceAttribute = (_element: CodePiece | undefined, attrName: string): string | undefined => {\\n\\tif (_element === undefined) {\\n\\t\\treturn undefined;\\n\\t}\\n    if (attrName in _element) {\\n        return (_element as any)[attrName]?.toString();\\n\\n    }\\n\\treturn undefined;\\n}\\n\\nconst setCodePieceAttribute = <AttrType>(_element: CodePiece | undefined, attrName: string, attrValue: AttrType): OkResult => {\\n\\tif (_element === undefined) {\\n\\t\\treturn OkResult.ok();\\n\\t}\\n\\tif (attrName in _element) {\\n\\t\\t(_element as any)[attrName] = attrValue;\\n\\t\\treturn OkResult.ok();\\n\\t} else {\\n\\t\\treturn OkResult.fail(`The ${_element.identifier} has no attributes`, `Can not set ${attrName} to non attributal element`)\\n\\t}\\n}\\n```\\n\\nVoila. Our `code-piece-object-tree.ts` is ready, how do we set the CodePieceTree?\\nSo, how do we use it and replace our previous code?\\n\\n### 1.3 Updating code to use REST\\nLet me check who is depending on the `CodePieceMemory`. What I did\\nis basically removed the code piece and turned it into a REST node\\nbased on `CodePiece`.\\n\\n> Offtopic:\\n> Luckily, I also follow the SDS rule, which makes CodePieceMemory local file and doesn\'t have to worry that removing it will break entire code.\\n\\nThe CodePieceMemory is part of `ModuleMemory` that along with code pieces keeps\\nit\'s source code, file path, and other attributes.\\n\\nWhat we need to do now is to update `ModuleMemory` to remove CodePiece and use the REST.\\n\\n---\\n> 1 day later\\n---\\n\\nI did replace `class ModuleMemory<T> extends CodePieceMemory`\\nwith the simple `ModuleMemory<T>` with the `rest()` method returning `Rest<CodePiece>`.\\n\\nNow, I can simply fetch data from module memory using `memory.rest.get!(\'#varName\') to fetch the result of the variable.\\n\\nCheck out the test files on [GitHub](https://github.com/ara-foundation/web/blob/27216bc54fa2cdd8764051d6da720cba30c79b4e/packages/reflect/test/type-declaration.test.ts#L37)."}]'),j=r=>r.replace(/^[\s_]+|[\s_]+$/g,"").replace(/[_\s]+/g," ").replace(/[-\s]+/g," ").replace(/^[a-z]/,function(i){return i.toUpperCase()}),x=r=>j(r).split(" ").map(h=>h.charAt(0).toUpperCase()+h.slice(1)).join(" "),v=r=>{const d=b.parse(r).replace(/<\/?[^>]+(>|$)/gm,"").replace(/[\r\n]\s*[\r\n]/gm,"");return k(d)},k=r=>{let i={"&nbsp;":" ","&lt;":"<","&gt;":">","&amp;":"&","&quot;":'"',"&#39;":"'"};return r.replace(/(&amp;|&lt;|&gt;|&quot;|&#39;)/g,d=>i[d])},N=({searchResult:r,searchString:i})=>{const d=(c=>c.reduce((a,n)=>{const o=a.findIndex(p=>p.group===n.group);return o===-1?a.push({group:n.group,groupItems:[{frontmatter:{...n.frontmatter},slug:n.slug,content:n.content}]}):a[o].groupItems.push({frontmatter:{...n.frontmatter},slug:n.slug,content:n.content}),a},[]))(r),f=(c,t)=>c.split(new RegExp(`(${t})`,"gi")).map((n,o)=>n.toLowerCase()===t.toLowerCase()?e.jsx("mark",{children:n},o):n),u=(c,t)=>c?.split(new RegExp(`(${t})`,"gi"))?.map((n,o)=>n.toLowerCase()===t.toLowerCase()?e.jsx("span",{className:"underline",children:n},o):n),w=(c,t)=>{const a=v(c),n=a.toLowerCase().indexOf(t.toLowerCase());let o=n;for(;o>0&&a[o-1]!==" ";)o--;const p=a.substring(o,t.length+n),l=a.substring(t.length+n,t.length+n+80);return e.jsxs(e.Fragment,{children:[f(p,t),l]})};return e.jsx("div",{className:"search-wrapper-body",children:i?e.jsx("div",{className:"search-result",children:d.length>0?d.map(c=>e.jsxs("div",{className:"search-result-group",children:[e.jsx("p",{className:"search-result-group-title",children:x(c.group)}),c.groupItems.map(t=>e.jsxs("div",{id:"searchItem",className:"search-result-item",children:[t.frontmatter.image&&e.jsx("div",{className:"search-result-item-image",children:e.jsx("img",{src:t.frontmatter.image,alt:t.frontmatter.title})}),e.jsxs("div",{className:"search-result-item-body",children:[e.jsx("a",{href:`/${t.slug}`,className:"search-result-item-title search-result-item-link",children:u(t.frontmatter.title,i)}),t.frontmatter.description&&e.jsx("p",{className:"search-result-item-description",children:u(t.frontmatter.description,i)}),t.content&&e.jsx("p",{className:"search-result-item-content",children:w(t.content,i)}),e.jsxs("div",{className:"search-result-item-taxonomies",children:[t.frontmatter.categories&&e.jsxs("div",{className:"mr-2",children:[e.jsx("svg",{width:"14",height:"14",fill:"currentColor",viewBox:"0 0 16 16",children:e.jsx("path",{d:"M11 0H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2 2 2 0 0 0 2-2V4a2 2 0 0 0-2-2 2 2 0 0 0-2-2zm2 3a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1V3zM2 2a1 1 0 0 1 1-1h8a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V2z"})}),t.frontmatter.categories.map((a,n)=>e.jsxs("span",{children:[u(a,i),t.frontmatter.categories&&n!==t.frontmatter.categories.length-1&&e.jsx(e.Fragment,{children:", "})]},a))]}),t.frontmatter.tags&&e.jsxs("div",{className:"mr-2",children:[e.jsxs("svg",{width:"14",height:"14",fill:"currentColor",viewBox:"0 0 16 16",children:[e.jsx("path",{d:"M3 2v4.586l7 7L14.586 9l-7-7H3zM2 2a1 1 0 0 1 1-1h4.586a1 1 0 0 1 .707.293l7 7a1 1 0 0 1 0 1.414l-4.586 4.586a1 1 0 0 1-1.414 0l-7-7A1 1 0 0 1 2 6.586V2z"}),e.jsx("path",{d:"M5.5 5a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zm0 1a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3zM1 7.086a1 1 0 0 0 .293.707L8.75 15.25l-.043.043a1 1 0 0 1-1.414 0l-7-7A1 1 0 0 1 0 7.586V3a1 1 0 0 1 1-1v5.086z"})]}),t.frontmatter.tags.map((a,n)=>e.jsxs("span",{children:[u(a,i),t.frontmatter.tags&&n!==t.frontmatter.tags.length-1&&e.jsx(e.Fragment,{children:", "})]},a))]})]})]})]},t.slug))]},c.group)):e.jsxs("div",{className:"search-result-empty",children:[e.jsxs("svg",{className:"mx-auto",width:"42",height:"42",viewBox:"0 0 47 47",fill:"none",children:[e.jsx("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M7.10368 33.9625C9.90104 36.2184 13.2988 37.6547 16.9158 38.0692C21.6958 38.617 26.5063 37.3401 30.3853 34.4939C30.4731 34.6109 30.5668 34.7221 30.6721 34.8304L41.9815 46.1397C42.5323 46.6909 43.2795 47.0007 44.0587 47.001C44.838 47.0013 45.5854 46.692 46.1366 46.1412C46.6878 45.5904 46.9976 44.8432 46.9979 44.064C46.9981 43.2847 46.6888 42.5373 46.138 41.9861L34.8287 30.6767C34.7236 30.5704 34.6107 30.4752 34.4909 30.3859C37.3352 26.5046 38.6092 21.6924 38.0579 16.912C37.6355 13.2498 36.1657 9.81322 33.8586 6.9977L31.7805 9.09214C34.0157 11.9274 35.2487 15.4472 35.2487 19.0942C35.2487 21.2158 34.8308 23.3167 34.0189 25.2769C33.207 27.2371 32.0169 29.0181 30.5167 30.5184C29.0164 32.0186 27.2354 33.2087 25.2752 34.0206C23.315 34.8325 21.2141 35.2504 19.0925 35.2504C16.9708 35.2504 14.8699 34.8325 12.9098 34.0206C11.5762 33.4682 10.3256 32.7409 9.18992 31.8599L7.10368 33.9625ZM28.9344 6.28152C26.1272 4.12516 22.671 2.93792 19.0925 2.93792C14.8076 2.93792 10.6982 4.64009 7.66829 7.66997C4.6384 10.6999 2.93623 14.8093 2.93623 19.0942C2.93623 21.2158 3.35413 23.3167 4.16605 25.2769C4.72475 26.6257 5.4625 27.8897 6.35716 29.0358L4.2702 31.1391C1.35261 27.548 -0.165546 23.0135 0.00974294 18.3781C0.19158 13.5695 2.18233 9.00695 5.58371 5.60313C8.98509 2.19932 13.5463 0.205307 18.3547 0.0200301C22.9447 -0.156832 27.4369 1.32691 31.0132 4.18636L28.9344 6.28152Z",fill:"currentColor"}),e.jsx("path",{d:"M3.13672 39.1367L38.3537 3.64355",stroke:"black",strokeWidth:"3",strokeLinecap:"round"})]}),e.jsxs("p",{className:"mt-4",children:['No results for "',e.jsx("strong",{children:i}),'"']})]})}):e.jsx("div",{className:"py-8 text-center",children:"Type something to search..."})})},M=()=>{const[r,i]=y.useState(""),h=t=>{i(t.currentTarget.value.replace("\\","").toLowerCase())},d=t=>{const a=new RegExp(`${r}`,"gi");return r===""?[]:t.filter(o=>{const p=o.frontmatter.title.toLowerCase().match(a),l=o.frontmatter.description?.toLowerCase().match(a),g=o.frontmatter.categories?.join(" ").toLowerCase().match(a),s=o.frontmatter.tags?.join(" ").toLowerCase().match(a),m=o.content.toLowerCase().match(a);if(p||m||l||g||s)return o})},f=performance.now(),u=d(C),c=((performance.now()-f)/1e3).toFixed(3);return y.useEffect(()=>{const t=document.getElementById("searchModal"),a=document.getElementById("searchInput"),n=document.getElementById("searchModalOverlay"),o=document.querySelectorAll("#searchItem");document.querySelectorAll("[data-search-trigger]").forEach(s=>{s.addEventListener("click",function(){document.getElementById("searchModal").classList.add("show"),a.focus()})}),n.addEventListener("click",function(){t.classList.remove("show")});let l=-1;const g=()=>{o.forEach((s,m)=>{m===l?s.classList.add("search-result-item-active"):s.classList.remove("search-result-item-active")}),o[l]?.scrollIntoView({behavior:"smooth",block:"nearest"})};document.addEventListener("keydown",function(s){if((s.metaKey||s.ctrlKey)&&s.key==="k"&&(t.classList.add("show"),a.focus(),g()),(s.key==="ArrowUp"||s.key==="ArrowDown")&&s.preventDefault(),s.key==="Escape"&&t.classList.remove("show"),s.key==="ArrowUp"&&l>0)l--;else if(s.key==="ArrowDown"&&l<o.length-1)l++;else if(s.key==="Enter"){const m=document.querySelector(".search-result-item-active a");m&&m?.click()}g()})},[r]),e.jsxs("div",{id:"searchModal",className:"search-modal",children:[e.jsx("div",{id:"searchModalOverlay",className:"search-modal-overlay"}),e.jsxs("div",{className:"search-wrapper",children:[e.jsxs("div",{className:"search-wrapper-header",children:[e.jsxs("label",{htmlFor:"searchInput",className:"absolute left-7 top-[calc(50%-7px)]",children:[e.jsx("span",{className:"sr-only",children:"search icon"}),r?e.jsxs("svg",{onClick:()=>i(""),viewBox:"0 0 512 512",height:"18",width:"18",className:"hover:text-red-500 cursor-pointer -mt-0.5",children:[e.jsx("title",{children:"close icon"}),e.jsx("path",{fill:"currentcolor",d:"M256 512A256 256 0 10256 0a256 256 0 100 512zM175 175c9.4-9.4 24.6-9.4 33.9.0l47 47 47-47c9.4-9.4 24.6-9.4 33.9.0s9.4 24.6.0 33.9l-47 47 47 47c9.4 9.4 9.4 24.6.0 33.9s-24.6 9.4-33.9.0l-47-47-47 47c-9.4 9.4-24.6 9.4-33.9.0s-9.4-24.6.0-33.9l47-47-47-47c-9.4-9.4-9.4-24.6.0-33.9z"})]}):e.jsxs("svg",{viewBox:"0 0 512 512",height:"18",width:"18",className:"-mt-0.5",children:[e.jsx("title",{children:"search icon"}),e.jsx("path",{fill:"currentcolor",d:"M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8.0 45.3s-32.8 12.5-45.3.0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9.0 208S93.1.0 208 0 416 93.1 416 208zM208 352a144 144 0 100-288 144 144 0 100 288z"})]})]}),e.jsx("input",{id:"searchInput",placeholder:"Search...",className:"search-wrapper-header-input",type:"input",name:"search",value:r,onChange:h,autoComplete:"off"})]}),e.jsx(N,{searchResult:u,searchString:r}),e.jsxs("div",{className:"search-wrapper-footer",children:[e.jsxs("span",{className:"flex items-center",children:[e.jsx("kbd",{children:e.jsx("svg",{width:"14",height:"14",fill:"currentcolor",viewBox:"0 0 16 16",children:e.jsx("path",{d:"M3.204 11h9.592L8 5.519 3.204 11zm-.753-.659 4.796-5.48a1 1 0 011.506.0l4.796 5.48c.566.647.106 1.659-.753 1.659H3.204a1 1 0 01-.753-1.659z"})})}),e.jsx("kbd",{children:e.jsx("svg",{width:"14",height:"14",fill:"currentcolor",viewBox:"0 0 16 16",children:e.jsx("path",{d:"M3.204 5h9.592L8 10.481 3.204 5zm-.753.659 4.796 5.48a1 1 0 001.506.0l4.796-5.48c.566-.647.106-1.659-.753-1.659H3.204a1 1 0 00-.753 1.659z"})})}),"to navigate"]}),e.jsxs("span",{className:"flex items-center",children:[e.jsx("kbd",{children:e.jsx("svg",{width:"12",height:"12",fill:"currentcolor",viewBox:"0 0 16 16",children:e.jsx("path",{fillRule:"evenodd",d:"M14.5 1.5a.5.5.0 01.5.5v4.8a2.5 2.5.0 01-2.5 2.5H2.707l3.347 3.346a.5.5.0 01-.708.708l-4.2-4.2a.5.5.0 010-.708l4-4a.5.5.0 11.708.708L2.707 8.3H12.5A1.5 1.5.0 0014 6.8V2a.5.5.0 01.5-.5z"})})}),"to select"]}),r&&e.jsxs("span",{children:[e.jsxs("strong",{children:[u.length," "]})," results - in"," ",e.jsxs("strong",{children:[c," "]})," seconds"]}),e.jsxs("span",{children:[e.jsx("kbd",{children:"ESC"})," to close"]})]})]})]})};export{M as default};
